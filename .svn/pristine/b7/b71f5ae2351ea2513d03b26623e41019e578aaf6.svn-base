package cronies.meeting.user.service.impl;

import cronies.meeting.user.service.CommonService;
import cronies.meeting.user.service.CommunityService;
import cronies.meeting.user.service.ContestService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import select.spring.exquery.service.ExqueryService;

import javax.servlet.http.HttpSession;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

@Service("ContestService")
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
public class ContestServiceImpl implements ContestService {

    Logger log = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private ExqueryService exqueryService;

    @Autowired
    private CommonService commonService;
    @Autowired
    private CommunityService communityService;

    @Autowired
    HttpSession session;

    @Transactional(propagation = Propagation.REQUIRED, readOnly = false)
    public HashMap<String, Object> getContestCheck(HashMap<String, Object> param) throws Exception {
        HashMap<String, Object> resultMap = new HashMap<String, Object>();
        HashMap<String, Object> resultOne = new HashMap<String, Object>();
        param.put("userId", param.get("ssUserId"));
        try {
            resultOne = exqueryService.selectOne("cronies.app.contest.contestSelectOne", param);
            if ( resultOne == null ) {
                resultMap.put("successYn", "Y");
            } else {
                resultMap.put("successYn", "N");
                resultMap.put("message", "이미 콘테스트에 참여신청을 하였습니다.");
            }
        } catch (Exception ex) {
            resultMap.put("successYn", "N");
            resultMap.put("message", "오류가 발생하였습니다. 문의 부탁드립니다.");
        }
        return resultMap;
    }

    @Transactional(propagation = Propagation.REQUIRED, readOnly = false)
    public HashMap<String, Object> getContestSupport(HashMap<String, Object> param) throws Exception {
        HashMap<String, Object> resultMap = new HashMap<String, Object>();
        HashMap<String, Object> resultOne = new HashMap<String, Object>();
        param.put("userId", param.get("ssUserId"));
        try {
            resultOne = exqueryService.selectOne("cronies.app.contest.contestSelectOne", param);
            if ( resultOne == null ) {
                exqueryService.insert("cronies.app.contest.getContestSupport", param);
                resultMap.put("successYn", "Y");
                resultMap.put("message", "콘테스트 참여신청이 완료되었습니다. 관리자 확인 후 최종 승인됩니다.");
            } else {
                resultMap.put("successYn", "N");
                resultMap.put("message", "이미 콘테스트에 참여신청을 하였습니다.");
            }
        } catch (Exception ex) {
            resultMap.put("successYn", "N");
            resultMap.put("message", "오류가 발생하였습니다. 문의 부탁드립니다.");
        }

        return resultMap;
    }

    @Transactional(propagation = Propagation.REQUIRED , readOnly = false)
    public List<HashMap<String, Object>> getContestUserList(HashMap<String, Object> param) throws Exception {

        List<HashMap<String, Object>> resultList = new ArrayList<HashMap<String, Object>>();

        resultList = exqueryService.selectList("cronies.app.contest.getContestUserList", param);

        for (HashMap<String, Object> result : resultList) {
            result.put("userKey", commonService.getEncoding(String.valueOf(result.get("userKey"))));
            result.put("articleKey", commonService.getEncoding(String.valueOf(result.get("articleKey"))));
            result.put("successYn","Y");
            result.put("message","");
        }

        return resultList;
    }

    @Transactional(propagation = Propagation.REQUIRED, readOnly = false)
    public HashMap<String, Object> getContestDetail(HashMap<String, Object> param) throws Exception {
        HashMap<String, Object> resultMap = new HashMap<String, Object>();
        HashMap<String, Object> articleMap = new HashMap<String, Object>();
        List<HashMap<String, Object>> parentCommentList = new ArrayList<>();
        param.put("userId", param.get("ssUserId"));

        param.put("articleId", commonService.getDecoding(String.valueOf(param.get("articleKey"))));

        //조회수 증가 처리
        if(param.get("viewAddYn").toString().equals("N")){
            communityService.setViewCount(param.get("articleId").toString());
        }

        try {
            articleMap = exqueryService.selectOne("cronies.app.contest.getContestDetail", param);
            articleMap.put("articleKey", commonService.getEncoding(String.valueOf(articleMap.get("articleId"))));
            // attachFileId 임시사용
            articleMap.put("attachFileId", articleMap.get("attachFileKey"));
            if(articleMap.get("attachFileKey") != null){
                articleMap.put("attachFileKey",commonService.getEncoding(String.valueOf(articleMap.get("attachFileKey"))));
            }
            resultMap.put("articleMap", articleMap);


            // 댓글조회
            parentCommentList = exqueryService.selectList("cronies.app.contest.getContestParentCommentList", param);
            for(int i=0; parentCommentList.size() > i; i++){
                List<HashMap<String, Object>> childCommentList = new ArrayList<>();
                param.put("commentId", parentCommentList.get(i).get("commentKey"));
                // 대댓글 조회
                childCommentList = exqueryService.selectList("cronies.app.contest.getContestChildCommentList", param);
                for(int j=0; childCommentList.size() > j; j++){
                    childCommentList.get(j).put("commentKey",commonService.getEncoding(String.valueOf(childCommentList.get(j).get("commentKey"))));
                    childCommentList.get(j).put("parentCommentKey",commonService.getEncoding(String.valueOf(childCommentList.get(j).get("parentCommentKey"))));
                }
                parentCommentList.get(i).put("commentKey",commonService.getEncoding(String.valueOf(parentCommentList.get(i).get("commentKey"))));
                parentCommentList.get(i).put("childCommentList", childCommentList);
            }
            resultMap.put("commentList", parentCommentList);

            resultMap.put("successYn","Y");
            resultMap.put("message","");
        } catch (Exception e) {
            resultMap.put("successYn", "N");
            resultMap.put("message", "콘테스트 글 조회 중 에러가 발생하였습니다.");
        }

        return resultMap;
    }

    @Transactional(propagation = Propagation.REQUIRED , readOnly = false)
    public List<HashMap<String, Object>> getContestReplyInfinite(HashMap<String, Object> param) throws Exception {
        List<HashMap<String, Object>> resultList = new ArrayList<HashMap<String, Object>>();

        param.put("articleId", commonService.getDecoding(String.valueOf(param.get("articleKey"))));
        param.put("commentId", commonService.getDecoding(String.valueOf(param.get("lastCommentKey"))));
        resultList = exqueryService.selectList("cronies.app.contest.getContestReplyInfinite", param);
        for(int i=0; resultList.size() > i; i++){
            List<HashMap<String, Object>> childCommentList = new ArrayList<>();
            param.put("commentId", resultList.get(i).get("commentKey"));
            // 대댓글 조회
            childCommentList = exqueryService.selectList("cronies.app.contest.getContestChildCommentList", param);
            for(int j=0; childCommentList.size() > j; j++){
                childCommentList.get(j).put("commentKey",commonService.getEncoding(String.valueOf(childCommentList.get(j).get("commentKey"))));
                childCommentList.get(j).put("parentCommentKey",commonService.getEncoding(String.valueOf(childCommentList.get(j).get("parentCommentKey"))));
            }
            resultList.get(i).put("commentKey",commonService.getEncoding(String.valueOf(resultList.get(i).get("commentKey"))));
            resultList.get(i).put("childCommentList", childCommentList);
        }

        return resultList;
    }
}
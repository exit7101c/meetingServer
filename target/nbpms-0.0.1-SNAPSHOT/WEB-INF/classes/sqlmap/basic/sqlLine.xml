<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="nse.pms.basic.sqlLine">
	
	<!--
	QueryID     : selectPlantList
	Description : Line 정보 결과 조회r
	-->
	<select id="selectLineList" parameterType="HashMap" resultType="ExqueryMap" >
			SELECT LINE_CD
			     , LINE_NM
	             , LINE_DESC
			     , AREA_CD
	             , AREA_NM
			     , REMARKS
			     , DISPLAY_ORDER
				 , USE_YN
				 , CREATED_DT
				 , CREATED_USER_ID
				 , UPDATED_DT
				 , UPDATED_USER_ID
		         , ROWNUM AS NO
	         FROM (
					SELECT LI.LINE_CD AS LINE_CD
					     , FN_GET_MSG(LI.LINE_NM, #{ssUserLang}) AS LINE_NM
			             , LI.LINE_DESC AS LINE_DESC
					     , LI.AREA_CD AS AREA_CD
			             , FN_GET_MSG(AR.AREA_NM, #{ssUserLang}) AS AREA_NM
					     , LI.REMARKS AS REMARKS
					     , LI.DISPLAY_ORDER AS DISPLAY_ORDER
						 , FN_GET_COMMCODE_NAME(#{ssUserLang}, 'USE_YN', LI.USE_YN) AS USE_YN
						 , TO_CHAR(LI.CREATED_DT,'YYYY-MM-DD HH24:MI:SS') AS CREATED_DT
						 , LI.CREATED_USER_ID
						 , TO_CHAR(LI.UPDATED_DT,'YYYY-MM-DD HH24:MI:SS') AS UPDATED_DT
						 , LI.UPDATED_USER_ID
					  FROM COM_LINE LI
			    INNER JOIN COM_AREA AR
			            ON LI.AREA_CD = AR.AREA_CD
		  <where>
			<if test='searchStr1 != null and  searchStr1 != ""'>
				AND (LI.LINE_CD LIKE '%${searchStr1}%' OR FN_GET_MSG(LI.LINE_NM, #{ssUserLang}) LIKE '%${searchStr1}%')
			</if>
			<if test='searchStr2 != null and  searchStr2 != ""'>
				AND (LI.AREA_CD LIKE '%${searchStr2}%' OR FN_GET_MSG(AR.AREA_NM, #{ssUserLang})  LIKE '%${searchStr2}%')
			</if>
			<if test='useYn != null and  useYn != ""'>
				AND LI.USE_YN = #{useYn}
			</if>
		</where>
		ORDER BY LINE_CD ASC)
		WHERE AREA_CD = #{ssUserAreaCd}
	</select>
	
	<!--
	QueryID     : selectPlantOne
	Description : Line 정보 상세 단건 조회
	-->	
	<select id="selectLineOne" parameterType="HashMap" resultType="ExqueryMap" >
		SELECT LI.LINE_CD AS LINE_CD
		     , FN_LANG_INP(LI.LINE_NM,'en') AS LINE_NM_EN 	-- 영어
		  	 , FN_LANG_INP(LI.LINE_NM,'ko') AS LINE_NM_KO 	-- 영어
          	 , FN_LANG_INP(LI.LINE_NM,'cn') AS LINE_NM_CN 	-- 중국어
             , LI.LINE_DESC AS LINE_DESC
		     , LI.AREA_CD AS AREA_CD
             , FN_GET_MSG(AR.AREA_NM, #{lang}) AS AREA_NM
		     , LI.REMARKS AS REMARKS
		     , LI.DISPLAY_ORDER AS DISPLAY_ORDER
		     , LI.USE_YN AS USE_YN
			 , FN_GET_COMMCODE_NAME(#{lang}, 'USE_YN', LI.USE_YN) AS USE_YN_DESC
			 , TO_CHAR(LI.CREATED_DT,'YYYY-MM-DD HH24:MI:SS') AS CREATED_DT
			 , LI.CREATED_USER_ID
			 , TO_CHAR(LI.UPDATED_DT,'YYYY-MM-DD HH24:MI:SS') AS UPDATED_DT
			 , LI.UPDATED_USER_ID			 
		  FROM COM_LINE LI
    INNER JOIN COM_AREA AR
            ON LI.AREA_CD = AR.AREA_CD	
		  <where>
			<if test='selectKey != null and  selectKey != ""'>
				AND LI.LINE_CD = #{selectKey}
			</if>
		</where>
		ORDER BY LI.DISPLAY_ORDER ASC
	</select>
		
	<!--
	QueryID     : insertPlant
	Description : Plant 정보 등록 -> 제품그룹 추가여부 확인 필요
	-->	
	<insert id="insertLine" parameterType="HashMap" >
		INSERT INTO COM_LINE (
								LINE_CD
							  , LINE_NM
							  , LINE_DESC
							  , AREA_CD							  
							  , USE_YN
							  , CREATED_DT
							  , CREATED_USER_ID
							  , UPDATED_DT
							  , UPDATED_USER_ID
							) VALUES (
								#{lineCd}
							  , #{lineNm}
							  , #{lineDesc}
							  , #{areaCd}
							  , #{useYn}
							  , SYSDATE
							  , #{ssUserId}
					          , SYSDATE
					          , #{ssUserId}
							)
	</insert>
	
	<!--
	QueryID     : updatePlant
	Description : Line 정보 수정
	-->	
	<update id="updateLine" parameterType="HashMap" >
		UPDATE COM_LINE
		<set>
			  LINE_NM = #{lineNm} 
			, LINE_DESC = #{lineDesc}
			, AREA_CD = #{areaCd}
			, USE_YN = #{useYn}
			, UPDATED_DT = SYSDATE
			, UPDATED_USER_ID = #{ssUserId}
		</set>
		WHERE LINE_CD = #{lineCd}
	</update>
	
	<!--
	QueryID     : updatePlant
	Description : Plant 정보 삭제
	-->	
	<update id="deleteLine" parameterType="HashMap" >
		UPDATE COM_LINE
		<set>
			  USE_YN = 'N'
			, UPDATED_DT = SYSDATE
			, UPDATED_USER_ID = #{ssUserId}
		</set>
		WHERE LINE_CD = #{lineCd}
	</update>

	<!--
	Description : 설비  공통 API 관련 LineList
	-->	
	<select id="selectApiLineList" parameterType="HashMap" resultType="ExqueryMap" >
		SELECT LI.LINE_CD 											AS LINE_CD
		     , FN_GET_MSG(LI.LINE_NM, #{ssUserLang}) 				AS LINE_NM
		     , FN_GET_MSG(LI.LINE_NM, #{ssUserLang}) 				AS NAME
		     , LI.LINE_CD 											AS CODE
             , LI.LINE_DESC 										AS LINE_DESC
		     , LI.AREA_CD 											AS AREA_CD
             , FN_GET_MSG(AR.AREA_NM, #{ssUserLang}) 				AS AREA_NM
		     , LI.REMARKS 											AS REMARKS
		     , LI.DISPLAY_ORDER                                     AS DISPLAY_ORDER
			 , FN_GET_COMMCODE_NAME(#{ssUserLang}, 'USE_YN', LI.USE_YN)      AS USE_YN
			 , TO_CHAR(LI.CREATED_DT,'YYYY-MM-DD HH24:MI:SS')       AS CREATED_DT
			 , LI.CREATED_USER_ID
			 , TO_CHAR(LI.UPDATED_DT,'YYYY-MM-DD HH24:MI:SS')       AS UPDATED_DT
			 , LI.UPDATED_USER_ID			 
	      FROM COM_LINE LI
   		INNER JOIN COM_AREA AR
        ON LI.AREA_CD = AR.AREA_CD
        AND AR.USE_YN = 'Y'
          WHERE LI.USE_YN = 'Y'
		  AND AR.AREA_CD = #{ssUserAreaCd}
		  <if test='lineCd != null and lineCd != ""'>
		  	AND Li.Line_CD = #{lineCd}
		  </if>		  
		ORDER BY DISPLAY_ORDER
	</select>
	
</mapper>
